name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - rollback

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-22.04
    if: github.event.inputs.action != 'rollback'
    steps:
      - name: Check out the Git repository
        uses: actions/checkout@v4
        
      - name: Set up Java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"
          
      - name: Grant execute permission to Gradle wrapper
        run: chmod +x gradlew
        
      - name: Run unit tests
        run: ./gradlew test

  # PMD Analysis
  pmd:
    name: PMD Code Analysis
    runs-on: ubuntu-22.04
    if: github.event.inputs.action != 'rollback'
    continue-on-error: true
    permissions:
      security-events: write
    steps:
      - name: Check out the Git repository
        uses: actions/checkout@v4

      - name: Set up Java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Run PMD
        uses: pmd/pmd-github-action@v2
        with:
          version: '7.0.0-rc4'
          sourcePath: 'src/main/java'
          rulesets: 'rulesets/java/quickstart.xml'
          analyzeModifiedFilesOnly: false

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif
        continue-on-error: true

  build-and-deploy:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event.inputs.action != 'rollback'
    outputs:
      deployment_timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Generate deployment timestamp
        id: timestamp
        run: |
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Deployment timestamp: $TIMESTAMP"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:${{ steps.timestamp.outputs.timestamp }}

      - name: Deploy with Rollback Support
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest
            TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}
            
            echo "=== Starting Deployment Process ==="
            echo "Timestamp: $TIMESTAMP"
            
            echo "Logging in to Docker Hub..."
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            
            echo "Pulling latest image..."
            docker pull $IMAGE
            
            echo "Creating backup of current deployment..."
            if docker ps -a --format '{{.Names}}' | grep -Eq '^web_server$'; then
            
              echo "Stopping current container..."
              docker stop web_server || true
              
              echo "Creating backup container: web_server_backup_$TIMESTAMP"
              docker rename web_server web_server_backup_$TIMESTAMP || true
            fi
            
            echo "Cleaning up old backup containers..."
            docker ps -a --format '{{.Names}}' | grep 'web_server_backup_' | sort -r | tail -n +4 | xargs -r docker rm -f
            
            echo "Starting new container..."
            docker run -d \
              --name=web_server \
              --restart=unless-stopped \
              -p 8080:8080 \
              -e DB_HOST=${{ secrets.PROD_DB_HOST }} \
              -e DB_PORT=${{ secrets.PROD_DB_PORT }} \
              -e DB_NAME=${{ secrets.PROD_DB_NAME }} \
              -e DB_USERNAME=${{ secrets.PROD_DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }} \
              -e JWT_SECRET=${{ secrets.PROD_JWT_SECRET }} \
              -e DEPLOYMENT_TIMESTAMP=$TIMESTAMP \
              $IMAGE
            
            echo "Waiting for new container to start..."
            sleep 15
            
            echo "Performing health check..."
            HEALTH_CHECK_COUNT=0
            MAX_RETRIES=6
            
            while [ $HEALTH_CHECK_COUNT -lt $MAX_RETRIES ]; do
              if docker ps --format '{{.Names}}' | grep -Eq '^web_server$' && \
                 [ "$(docker inspect -f '{{.State.Running}}' web_server)" = "true" ]; then
                echo "Health check passed. Container is running."
                break
              fi
              
              HEALTH_CHECK_COUNT=$((HEALTH_CHECK_COUNT + 1))
              echo "Health check attempt $HEALTH_CHECK_COUNT/$MAX_RETRIES failed. Retrying in 10 seconds..."
              sleep 10
            done
            
            if [ $HEALTH_CHECK_COUNT -ge $MAX_RETRIES ]; then
              echo "Deployment failed. Rolling back to previous version..."
              
              docker stop web_server || true
              docker rm web_server || true
              
              LATEST_BACKUP=$(docker ps -a --format '{{.Names}}' | grep 'web_server_backup_' | sort -r | head -n 1)
              if [ -n "$LATEST_BACKUP" ]; then
                echo "Restoring backup: $LATEST_BACKUP"
                docker rename $LATEST_BACKUP web_server
                docker start web_server
                echo "Rollback completed successfully."
              else
                echo "No backup available for rollback!"
                exit 1
              fi
              exit 1
            fi
            
            echo "Deployment successful!"
            
            echo "Cleaning up dangling images..."
            docker image prune -f
            
            if [ -d ~/monitoring ]; then
              echo "Restarting monitoring containers..."
              cd ~/monitoring
              docker compose up -d || true
            fi
            
            echo "=== Deployment Process Completed ==="

  # Manual Rollback Job
  rollback:
    name: Manual Rollback
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rollback'
    steps:
      - name: Rollback to Previous Version
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "=== Starting Rollback Process ==="
            
            LATEST_BACKUP=$(docker ps -a --format '{{.Names}}' | grep 'web_server_backup_' | sort -r | head -n 1)
            
            if [ -z "$LATEST_BACKUP" ]; then
              echo "No backup containers found!"
              echo "Available containers:"
              docker ps -a --format 'table {{.Names}}\t{{.Status}}\t{{.CreatedAt}}'
              exit 1
            fi
            
            echo "Found backup: $LATEST_BACKUP"
            
            ROLLBACK_TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
            if docker ps -a --format '{{.Names}}' | grep -Eq '^web_server$'; then
              echo "Backing up current state before rollback..."
              docker stop web_server || true
              docker rename web_server web_server_before_rollback_$ROLLBACK_TIMESTAMP || true
            fi
            
            echo "Restoring from backup: $LATEST_BACKUP"
            docker rename $LATEST_BACKUP web_server
            docker start web_server
            
            echo "Waiting for rollback container to start..."
            sleep 15
            
            if [ "$(docker inspect -f '{{.State.Running}}' web_server)" = "true" ]; then
              echo "Rollback successful!"
              
              docker rm -f web_server_before_rollback_$ROLLBACK_TIMESTAMP || true
            else
              echo "Rollback failed!"
              exit 1
            fi
            
            echo "=== Rollback Process Completed ==="

  # Post-deployment health check
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.event.inputs.action != 'rollback'
    steps:
      - name: Extended Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "=== Running Extended Health Checks ==="
            
            sleep 30
            
            echo "Checking container status..."
            if [ "$(docker inspect -f '{{.State.Running}}' web_server)" != "true" ]; then
              echo "Container is not running!"
              echo "Container logs:"
              docker logs web_server --tail 50
              exit 1
            fi
            echo "Container is running"
            
            echo "Checking port accessibility..."
            PORT_CHECK=false
            
            if command -v ss > /dev/null; then
              if ss -tuln | grep :8080 > /dev/null; then
                PORT_CHECK=true
              fi
            
            elif curl -f --connect-timeout 5 http://localhost:8080 > /dev/null 2>&1; then
              PORT_CHECK=true

            elif docker port web_server 8080 > /dev/null 2>&1; then
              PORT_CHECK=true
            fi
            
            if [ "$PORT_CHECK" = true ]; then
              echo "Port 8080 is accessible"
            else
              echo "Checking with alternative method..."

              if docker ps --filter name=web_server --format "{{.Ports}}" | grep 8080 > /dev/null; then
                echo "Port mapping found in Docker"
                PORT_CHECK=true
              else
                echo "Port 8080 is not accessible!"
                echo "Docker container ports:"
                docker port web_server || echo "No port mappings found"
                echo "Docker container status:"
                docker ps --filter name=web_server
                exit 1
              fi
            fi
            
            echo "Testing application health..."
            HEALTH_ATTEMPTS=0
            MAX_HEALTH_ATTEMPTS=3
            
            while [ $HEALTH_ATTEMPTS -lt $MAX_HEALTH_ATTEMPTS ]; do
              if curl -f --connect-timeout 10 http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo "Health endpoint is responding"
                break
              elif curl -f --connect-timeout 10 http://localhost:8080 > /dev/null 2>&1; then
                echo "Application responds (health endpoint may not be available)"
                break
              fi
              
              HEALTH_ATTEMPTS=$((HEALTH_ATTEMPTS + 1))
              if [ $HEALTH_ATTEMPTS -lt $MAX_HEALTH_ATTEMPTS ]; then
                echo "Health check attempt $HEALTH_ATTEMPTS failed, retrying..."
                sleep 10
              fi
            done
            
            if [ $HEALTH_ATTEMPTS -ge $MAX_HEALTH_ATTEMPTS ]; then
              echo "Health endpoint test failed, but container is running"
            fi
            
            echo "All health checks completed!"
            echo "Deployment timestamp: ${{ needs.build-and-deploy.outputs.deployment_timestamp }}"